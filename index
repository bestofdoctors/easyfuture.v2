<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Emlak NFT Marketplace - Kalıcı Bağlantı</title>
    <style>
        /* Tüm CSS kodları aynı kalacak */
        /* ... (Önceki CSS kodları) ... */
        
        /* Yeni eklenen disconnect butonu stili */
        .disconnect-btn {
            background: #e74c3c;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 30px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-left: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
        
        .disconnect-btn:hover {
            background: #c0392b;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        .connection-status {
            display: flex;
            align-items: center;
            margin-top: 10px;
            padding: 10px;
            border-radius: 8px;
            background: rgba(46, 204, 113, 0.1);
            color: #27ae60;
        }
        
        .connection-status.error {
            background: rgba(231, 76, 60, 0.1);
            color: #e74c3c;
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <div class="header-content">
                <div class="logo">
                    <span class="logo-icon">🏠</span>
                    <span>Emlak NFT Marketplace</span>
                </div>
                <div class="wallet-section">
                    <div class="wallet-info">
                        <span>Bakiye:</span>
                        <span class="balance" id="balance">0.00 SOL</span>
                    </div>
                    <div class="wallet-actions">
                        <button id="connectWallet" class="connect-btn">Phantom Bağla</button>
                        <button id="disconnectWallet" class="disconnect-btn">Bağlantıyı Kes</button>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <div class="container">
        <!-- Bağlantı durumu gösterimi -->
        <div id="connectionStatus" class="connection-status" style="display: none;">
            <span>🔗 Phantom wallet bağlı. Adres: </span>
            <span id="connectedAddress" style="font-weight: bold; margin: 0 5px;"></span>
            <span>Sayfayı yenilediğinizde otomatik bağlanacak.</span>
        </div>
        
        <!-- Diğer içerikler aynı kalacak -->
        <!-- ... (Önceki HTML yapısı) ... -->
    </div>

    <footer>
        <!-- ... (Footer aynı) ... -->
    </footer>

    <script>
        // State variables
        let walletConnected = false;
        let walletAddress = '';
        let balance = 0;
        let portfolio = JSON.parse(localStorage.getItem('realEstatePortfolio')) || [];
        
        // DOM Elements
        const connectWalletBtn = document.getElementById('connectWallet');
        const disconnectWalletBtn = document.getElementById('disconnectWallet');
        const balanceEl = document.getElementById('balance');
        const connectionStatus = document.getElementById('connectionStatus');
        const connectedAddress = document.getElementById('connectedAddress');
        
        // Bağlantı durumunu kontrol et ve güncelle
        function checkConnectionStatus() {
            const savedConnection = localStorage.getItem('phantomConnection');
            
            if (savedConnection) {
                try {
                    const connectionData = JSON.parse(savedConnection);
                    
                    if (connectionData.connected && connectionData.address) {
                        walletConnected = true;
                        walletAddress = connectionData.address;
                        
                        // UI güncelle
                        connectWalletBtn.textContent = 'Bağlandı';
                        connectWalletBtn.classList.add('connected');
                        connectedAddress.textContent = `${walletAddress.substring(0, 6)}...${walletAddress.substring(walletAddress.length - 4)}`;
                        connectionStatus.style.display = 'flex';
                        
                        // Mock balance
                        balance = 5.75;
                        balanceEl.textContent = balance.toFixed(2) + ' SOL';
                        
                        return true;
                    }
                } catch (e) {
                    console.error('Bağlantı verisi okunamadı:', e);
                    localStorage.removeItem('phantomConnection');
                }
            }
            
            walletConnected = false;
            connectWalletBtn.textContent = 'Phantom Bağla';
            connectWalletBtn.classList.remove('connected');
            connectionStatus.style.display = 'none';
            return false;
        }
        
        // Sayfa yüklendiğinde bağlantı durumunu kontrol et
        document.addEventListener('DOMContentLoaded', () => {
            if (!checkConnectionStatus()) {
                console.log('Önceden kaydedilmiş bağlantı bulunamadı.');
            }
            
            // Portföyü güncelle
            updatePortfolioUI();
        });
        
        // Connect to Phantom Wallet
        connectWalletBtn.addEventListener('click', async () => {
            if (walletConnected) return;
            
            if (typeof window.solana === 'undefined') {
                alert('Phantom wallet yüklü değil! Lütfen yükleyin.');
                return;
            }
            
            try {
                const resp = await window.solana.connect();
                walletAddress = resp.publicKey.toString();
                walletConnected = true;
                
                // Bağlantıyı localStorage'a kaydet
                localStorage.setItem('phantomConnection', JSON.stringify({
                    connected: true,
                    address: walletAddress,
                    timestamp: new Date().getTime()
                }));
                
                // UI güncelle
                connectWalletBtn.textContent = 'Bağlandı';
                connectWalletBtn.classList.add('connected');
                connectedAddress.textContent = `${walletAddress.substring(0, 6)}...${walletAddress.substring(walletAddress.length - 4)}`;
                connectionStatus.style.display = 'flex';
                
                // Mock balance
                balance = 5.75;
                balanceEl.textContent = balance.toFixed(2) + ' SOL';
                
                // Portföyü güncelle
                updatePortfolioUI();
                
            } catch (err) {
                console.error('Wallet connection error:', err);
                alert('Wallet bağlantısı başarısız: ' + err.message);
            }
        });
        
        // Disconnect from Phantom Wallet
        disconnectWalletBtn.addEventListener('click', () => {
            walletConnected = false;
            walletAddress = '';
            balance = 0;
            
            // Bağlantıyı localStorage'dan kaldır
            localStorage.removeItem('phantomConnection');
            
            // UI güncelle
            connectWalletBtn.textContent = 'Phantom Bağla';
            connectWalletBtn.classList.remove('connected');
            connectionStatus.style.display = 'none';
            balanceEl.textContent = '0.00 SOL';
            
            alert('Phantom wallet bağlantısı kesildi.');
        });
        
        // ... (Diğer fonksiyonlar aynı kalacak) ...
        // updatePortfolioUI, mintBtn event listener vs. önceki kodlarla aynı
        
    </script>
</body>
</html>
